-- Data Types Recap --
In Python, text in between quotes -- either single or double quotes -- is a string data type. An integer is a whole number, without a fraction, while a float is a real number that can contain a fractional part. For example, 1, 7, 342 are all integers, while 5.3, 3.14159 and 6.0 are all floats. When attempting to mix incompatible data types, you may encounter a TypeError. You can always check the data type of something using the type() function.

-- Implicit vs Explicit Conversion --
As we saw earlier in the video, some data types can be mixed and matched due to implicit conversion. Implicit conversion is where the interpreter helps us out and automatically converts one data type into another, without having to explicitly tell it to do so.

By contrast, explicit conversion is where we manually convert from one data type to another by calling the relevant function for the data type we want to convert to. We used this in our video example when we wanted to print a number alongside some text. Before we could do that, we needed to call the str() function to convert the number into a string. Once the number was explicitly converted to a string, we could join it with the rest of our textual string and print the result.

-- Study Guide: Expressions and Variables --
This study guide provides a quick-reference summary of what you learned in this lesson and serves as a guide for the upcoming practice quiz.  

In the Expressions and Variables segment, you learned about expressions, variables, and the data types: string, integer, and float. You learned how to convert a value from one data type to another and you learned how to resolve a few common errors in Python.

Terms
expression - a combination of numbers, symbols, or other values that produce a result when evaluated

data types - classes of data (e.g., string, int, float, Boolean, etc.), which include the properties and behaviors of instances of the data type (variables)

variable - an instance of a data type class, represented by a unique name within the code, that stores changeable values of the specific data type

implicit conversion - when the Python interpreter automatically converts one data type to another

explicit conversion - when code is written to manually convert one data type to another using a data type conversion function:

str() - converts a value (often numeric) to a string data type

int() - converts a value (usually a float) to an integer data type

float() - converts a value (usually an integer) to a float data type

 
For additional Python practice, the following links will take you to several popular online interpreters and codepads:

Welcome to Python
 

Online Python Interpreter
 

Create a new Repl
 

Online Python-3 Compiler (Interpreter)

Compile Python 3 Online

Your Python Trinket

-- Definining Functions Recap --
We looked at a few examples of built-in functions in Python, but being able to define your own functions is incredibly powerful. We start a function definition with the def keyword, followed by the name we want to give our function. After the name, we have the parameters, also called arguments, for the function enclosed in parentheses. A function can have no parameters, or it can have multiple parameters. Parameters allow us to call a function and pass it data, with the data being available inside the function as variables with the same name as the parameters. Lastly, we put a colon at the end of the line.

After the colon, the function body starts. It’s important to note that in Python the function body is delimited by indentation. This means that all code indented to the right following a function definition is part of the function body. The first line that’s no longer indented is the boundary of the function body. It’s up to you how many spaces you use when indenting -- just make sure to be consistent. So if you choose to indent with four spaces, you need to use four spaces everywhere in your code.

-- Returning Values Using Functions --
Sometimes we don't want a function to simply run and finish. We may want a function to manipulate data we passed it and then return the result to us. This is where the concept of return values comes in handy. We use the return keyword in a function, which tells the function to pass data back. When we call the function, we can store the returned value in a variable. Return values allow our functions to be more flexible and powerful, so they can be reused and called multiple times.

Functions can even return multiple values. Just don't forget to store all returned values in variables! You could also have a function return nothing, in which case the function simply exits.

-- Study Guide: Functions --
This study guide provides a quick-reference summary of what you learned in this lesson and serves as a guide for the upcoming practice quiz.  

In the Functions segment, you learned how to define and call functions, utilize a function’s parameters, and return data from a function. You also learned how to differentiate and convert between different data types utilizing variables. Plus, you learned a few best practices for writing reusable and readable code. 

Terms
return value - the value or variable returned as the end result of a function

parameter (argument) -  a value passed into a function for use within the function

refactoring code - a process to restructure code without changing functionality

Knowledge
The purpose of the def() keyword is to define a new function. 

Best practices for writing code that is readable and reusable:

Create a reusable function - Replace duplicate code with one reusable function to make the code easier to read and repurpose.

Refactor code - Update code so that it is self-documenting and the intent of the code is clear.

Add comments - Adding comments is part of creating self-documenting code. Using comments allows you to leave notes to yourself and/or other programmers to make the purpose of the code clear.

Python practice information
For additional Python practice, the following links will take you to several popular online interpreters and codepads:

Welcome to Python
 

Online Python Interpreter
 

Create a new Repl
 

Online Python-3 Compiler (Interpreter)

Compile Python 3 Online

Your Python Trinket

-- Compariosn Operators with Equations --
The following examples demonstrate how to use comparison operators with the data types int (integers, whole numbers) and float (number with a decimal point or fractional value). Comparison operators return Boolean results. As you learned previously, Boolean is a data type that can hold only one of two values: True or False.  

The comparison operators include: 

==    (equality) 

!=     (not equal to) 

>       (greater than)

<      (less than)

>=    (greater than or equal to)

<=    (less than or equal to)

Key takeaways
Python comparison operators return Boolean results: True or False.

Symbol   Name                                 Expression   Description
==       Equality operator                    a == b       a is equal to b
!=       Not equal to operator                a != b       a is not equal to b
>        Greater than operator                a > b        a is larger than b
>=       Greater than or equal to operator    a >= b       a is larger than or equal to b
<        Less than operator                   a < b        a is smaller than b
<=       Less than or equal to operator       a <= b       a is smaller than or equal to b

Resources for more information
For more information about the concepts covered in these practice exercises, please visit:

Order of Operations
 - A refresher on the mathematical Order of Operations. 

Python Comparison Operators with Syntax and Example
 - Provides examples of more complex comparisons.

Raise numbers to a power: here’s how to exponentiate in Python
 - Explains multiple methods for calculating exponents in Python.

-- Logical Operators --
Logical operators are used to construct more complex expressions. You can make complex comparisons by joining comparison statements together using the logical operators: and, or, not. Complex comparisons return a Boolean (True or False) result. 

and 

Both sides of the statement being evaluated must be True for the whole statement to be True. 

Example: (5 > 1 and 5 < 10) = True

or 

If either side of the comparison is True, then the whole statement is True. 

Example: (color = "blue" or color = "green") = True

not 

Inverts the Boolean result of the statement immediately following it. So, if a statement evaluates to True, and we put the not operator in front of it, it would become False. 

Example: (not "A" == "A") = False

Key takeaways
When Python logical operators are used with comparison operators, the interpreter will return Boolean results (True or False):

Expression             Description
a == a and a != b      True if both sides are True, otherwise False.
a > b or a <= c        True if either side is True. False if both sides are False.
not a == b             True if the statement is False, False if the statement is True.

-- if Statements Recap --
We can use the concept of branching to have our code alter its execution sequence depending on the values of variables. We can use an if statement to evaluate a comparison. We start with the if keyword, followed by our comparison. We end the line with a colon. The body of the if statement is then indented to the right. If the comparison is True, the code inside the if body is executed. If the comparison evaluates to False, then the code block is skipped and will not be run.

-- else Statements and the Modulo Operator --
We just covered the if statement, which executes code if an evaluation is true and skips the code if it’s false. But what if we wanted the code to do something different if the evaluation is false? We can do this using the else statement. The else statement follows an if block, and is composed of the keyword else followed by a colon. The body of the else statement is indented to the right, and will be executed if the above if statement doesn’t execute.

We also touched on the modulo operator, which is represented by the percent sign: %. This operator performs integer division, but only returns the remainder of this division operation. If we’re dividing 5 by 2, the quotient is 2, and the remainder is 1. Two 2s can go into 5, leaving 1 left over. So 5%2 would return 1. Dividing 10 by 5 would give us a quotient of 2 with no remainder, since 5 can go into 10 twice with nothing left over. In this case, 10%5 would return 0, as there is no remainder.

-- Complex Branching with elif Statements --
Building off of the if and else blocks, which allow us to branch our code depending on the evaluation of one statement, the elif statement allows us even more comparisons to perform more complex branching. Very similar to the if statements, an elif statement starts with the elif keyword, followed by a comparison to be evaluated. This is followed by a colon, and then the code block on the next line, indented to the right. An elif statement must follow an if statement, and will only be evaluated if the if statement was evaluated as false. You can include multiple elif statements to build complex branching in your code to do all kinds of powerful things!

-- Study Guide: Conditionals --
This study guide provides a quick-reference summary of what you learned in this lesson and serves as a guide for the upcoming practice quiz.  

In the Conditionals segment, you learned about the built-in Python operators used for comparing values and the logical operators for making complex comparisons. You also learned how to use operators in if-else-elif blocks. 

 

Knowledge
Comparison operators with numerical values
Comparison expressions return a Boolean result (True or False). 

x == y        If x is equal to y, return True. Else, return False.

x != y         If x is not equal to y, return True. Else, return False.

x < y          If x is less than y, return True. Else, return False.

x <= y        If x is less than or equal to y, return True. Else, return False.

x > y          If x is greater than y, return True. Else, return False.

x >= y        If x is greater or equal to y, return True. Else, return False.

Comparison operators with strings
Comparison expressions with strings also return a Boolean result (True or False).

"x" == "y"  If the words are the same, return True. Else, return False.

"x" != "y"   If the words are not the same, return True. Else, return False.

When used with strings, the following comparison expressions will alphabetize the strings.

"x" < "y"   	If string "x"  has a smaller Unicode value than string "y", return True.  Else, return False.

"x" <= "y" 	If the Unicode value for string "x" is smaller than or equal to the Unicode value of string "y", return True. Else, return False.

"x" > "y"    	If string "x" has a larger Unicode value than string "y", return True. Else, return False.

"x" >= "y"  	If the Unicode value for string "x" is greater than or equal to the Unicode value of string "y", return True. Else, return False.

Logical operators
Logical operators are used to combine comparison expressions and also return Boolean results (True or False).

comparison1 and comparison2 

Returns a True result if both comparison1 and comparison2 are true. 

If they are not both true, return False.

comparison1 or comparison2 

Returns a True result if either comparison1 and/or comparison2 are True. 

If neither comparison is true, return False.

not comparison1

Returns the inverse Boolean value of the comparison. 

Returns a True result if comparison1 is false. 

If comparison1 is true, then returns False.

Syntax of an if-elif-else block
If condition1 is True:

Then perform action1 and exit if-elif-else block

If condition2 is True:

Then perform action2 and exit if-elif-else block

If neither condition1 nor condition2 are True:

Then perform action3 and exit if-elif-else block

Python practice information
For additional Python practice, the following links will take you to several popular online interpreters and codepads:

Welcome to Python
 

Online Python Interpreter
 

Create a new Repl
 

Online Python-3 Compiler (Interpreter)

Compile Python 3 Online

Your Python Trinket

-- Study Guide: Week 2 Graded Quiz --
It is time to prepare for the Week 2 graded quiz. Please review the following items from this week before starting the Week 2 Graded Quiz. If you would like to refresh your memory on these materials, please revisit the Study Guides located before each Practice Quiz in Week 2 : 
Study Guide: Expressions and Variables
, 
Study Guide: Functions
, and 
Study Guide: Conditionals
.  

Knowledge  
How to assign values to variables and use them in code

How to construct a function and use function parameters

How comparison and logical operators can be used, 

How comparison and logical operators behave with different data types

What type of results simple and complex comparisons produce

How to alphabetize strings using comparison operators

What must appear after the if and elif keywords

What the elif keyword does 

When an if,  elif, or else-statement will execute

How to use the floor division //  and modulo % operators and why

How to use logical operators with comparison operators to develop complex conditional statements within an if-elif-else block

Best practices for coding and their benefits

What “self-documenting code” means


There may be a few questions on the quiz that will ask you about either the output of a small block of code or the value of part of the code. Make sure to read the instructions carefully on those questions.

-- Reminder: Correct syntax is critical --
Using precise syntax is critical when writing code in any programming language, including Python. Even a small typo can cause a syntax error and the automated Python-coded quiz grader will mark your code as incorrect. This reflects real life coding errors in the sense that a single error in spelling, case, punctuation, etc. can cause your code to fail. Coding problems caused by imprecise syntax will always be an issue whether you are learning a programming language or you are using programming skills on the job. So, it is critical to start the habit of being precise in your code now. 

No credit will be given if there are any coding errors on the automated graded quizzes - including minor errors. Fortunately, you have 3 optional retake opportunities on the graded quizzes in this course. Additionally, you have unlimited retakes on practice quizzes and can review the videos and readings as many times as you need to master the concepts in this course.  

Now, before starting the graded quiz, please review this list of common syntax errors coders make when writing code.

Common syntax errors:
Misspellings

Incorrect indentations

Missing or incorrect key characters:

Parenthetical types - ( curved ), [ square ], { curly }

Quote types - "straight-double" or 'straight-single', “curly-double” or ‘curly-single’

Block introduction characters, like colons - :

Data type mismatches

Missing, incorrectly used, or misplaced Python reserved words

Using the wrong case (uppercase/lowercase) - Python is a case-sensitive language
 

Resources
For additional Python practice, the following links will take you to several popular online interpreters and codepads:

Welcome to Python
 

Online Python Interpreter
 

Create a new Repl
 

Online Python-3 Compiler (Interpreter)

Compile Python 3 Online

Your Python Trinket

